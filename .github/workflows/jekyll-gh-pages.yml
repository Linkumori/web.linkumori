name: Deploy Express.js Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit

    - name: Build application
      run: |
        npm run build --if-present
      env:
        CI: true

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && matrix.node-version == '18.x'
      uses: JamesIves/github-pages-deploy-action@v4.4.1
      with:
        branch: gh-pages
        folder: .
        clean: true
        clean-exclude: |
          .nojekyll
          CNAME

    - name: Update release assets
      if: github.ref == 'refs/heads/main' && matrix.node-version == '18.x'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create a new release if it doesn't exist
        tag="B45"
        release_name="Release ${tag}"
        
        # Check if release exists
        release_id=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${tag}" \
          | jq -r '.id')
        
        if [ "${release_id}" = "null" ]; then
          # Create new release
          response=$(curl -s -X POST \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" \
            -d "{
              \"tag_name\": \"${tag}\",
              \"name\": \"${release_name}\",
              \"body\": \"Automated release ${tag}\",
              \"draft\": false,
              \"prerelease\": false
            }")
          release_id=$(echo "${response}" | jq -r '.id')
        fi

        # Update the release assets
        for file in "Linkumori.crx" "updates.xml"; do
          if [ -f "${file}" ]; then
            # Delete existing asset if it exists
            asset_id=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/${release_id}/assets" \
              | jq -r ".[] | select(.name == \"${file}\") | .id")
            
            if [ "${asset_id}" != "null" ]; then
              curl -s -X DELETE \
                -H "Authorization: token ${GITHUB_TOKEN}" \
                "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/assets/${asset_id}"
            fi
            
            # Upload new asset
            curl -s -X POST \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@${file}" \
              "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${release_id}/assets?name=${file}"
          fi
        done
